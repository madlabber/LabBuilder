- name: setup login vars
  set_fact:
    vmw_login: &vmw_login
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: no

- name: Create VM with 2 interfaces
  community.vmware.vmware_guest:
    <<: *vmw_login
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster|default(omit)}}'    
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: centos7_64Guest
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
    disk:
    - size_gb: '{{ vm_disk_gb |int }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb |int}}'
      num_cpus: '{{ vm_num_cpus |int}}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network_wan }}'
      device_type: e1000
    - name: '{{ vm_network_lan }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  ignore_errors: true
  register: deploy_vm
  when: vm_network_opt1 == ""

- name: Create VM with 3 interfaces
  community.vmware.vmware_guest:
    <<: *vmw_login
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster|default(omit)}}'    
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: centos7_64Guest
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
    disk:
    - size_gb: '{{ vm_disk_gb |int }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb |int}}'
      num_cpus: '{{ vm_num_cpus |int}}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network_wan }}'
      device_type: e1000
    - name: '{{ vm_network_lan }}'
      device_type: e1000
    - name: '{{ vm_network_opt1 }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  ignore_errors: true
  register: deploy_vm
  when: vm_network_opt1 != ""

- name: upload config disk
  include_tasks: upload_config_disk.yml

- name: attach config disk
  community.vmware.vmware_guest_disk:
    <<: *vmw_login
    datacenter: "{{vcenter_datacenter}}"
    name: '{{ vm_name }}'
    disk:
    - filename: '[{{ vm_datastore }}] {{ vm_name }}/pfsense_config.vmdk'
      scsi_controller: 0
      unit_number: 1
  delegate_to: localhost

- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    <<: *vmw_login
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - disk
      - cdrom
      - ethernet
      - floppy
  delegate_to: localhost

- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    <<: *vmw_login
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate

- name: Check for VMware tools  
  community.vmware.vmware_guest_tools_wait:
    <<: *vmw_login
    name: '{{ vm_name }}'
    timeout: 60
  delegate_to: localhost
  register: alreadyinstalled           
  ignore_errors: true

- block:
  - name: Blind Install
    community.vmware.vmware_guest_sendkey:
      <<: *vmw_login
      name: "{{ vm_name }}"
      keys_send: "{{item}}"
    delegate_to: localhost
    loop_control:
      pause: 5
    loop: 
      - "ENTER" # enter # ACCEPT
      - "ENTER" # enter # Install pfSense
      - "ENTER" # enter # AutoFS-OK (ZFS)
      - "ENTER" # enter # Proceed
      - "ENTER" # enter # stripe - no redundancy
      - "SPACE" # Select disk
      - "ENTER" # Accept Disk
      - "LEFTARROW" # YES
      - "ENTER" # Proceed with install

  - name: 'Wait {{install_timer|default(90)}} seconds for install'
    wait_for: 
      timeout: "{{install_timer|default(90)}}"
    delegate_to: localhost

  - name: reboot after install
    community.vmware.vmware_guest_sendkey:
      <<: *vmw_login
      name: "{{ vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop_control:
      pause: 5
    loop: 
      - "" # enter # open shell? -> No
      - "" # enter # reboot
      - "" # enter # extra enter

  # - name: Wait 90 seconds for reboot
  #   wait_for: timeout=90
  #   delegate_to: localhost

  # - name: Blind Install part 3 - Open-VM-Tools
  #   community.vmware.vmware_guest_sendkey:
  #     <<: *vmw_login
  #     name: "{{ vm_name }}"
  #     keys_send: ENTER
  #     string_send: "{{item}}"
  #   delegate_to: localhost
  #   loop_control:
  #     pause: 5
  #   loop: 
  #     - "8" 
  #     - "8" 
  #     - "8" 
  #     - ""
  #     - "pkg-static install -y pfSense-pkg-Open-VM-Tools" # enter
  #     - "service vmware-guestd.sh start"
  #     - ""

  - name: Wait for VMware tools to become available 
    community.vmware.vmware_guest_tools_wait:
      <<: *vmw_login
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 10
    delay: 60
    register: result           
    until: result is succeeded
  when: alreadyinstalled is failed

# push config file
- name: copy file to vm 
  community.vmware.vmware_guest_file_operation:
    <<: *vmw_login
    #datacenter: "{{ datacenter_name }}"
    vm_id: '{{ vm_name }}'
    vm_username: "admin"
    vm_password: "pfsense" # defaults are still in effect at this point
    copy:
        src: "{{ config_xml_file }}"
        dest: "/cf/conf/config.xml"
        overwrite: True
  delegate_to: localhost
  register: copyconfig
  when: config_xml_file != ""
  ignore_errors: true

# prevent the default config from being reapplied after every reboot
- name: detach config disk
  community.vmware.vmware_guest_disk:
    <<: *vmw_login
    datacenter: "{{vcenter_datacenter}}"
    name: '{{ vm_name }}'
    disk:
    - state: absent
      scsi_controller: 0
      unit_number: 1
  delegate_to: localhost

- block:
  - name: Reboot-Guest
    community.vmware.vmware_guest_powerstate:
      <<: *vmw_login
      name: '{{ vm_name }}'
      state: reboot-guest
    delegate_to: localhost
    register: deploy
  - name: Wait for 30 seconds
    wait_for: timeout=30
    delegate_to: localhost
    when: config_xml_file != ""

  - name: Wait for VMware tools to become available by name
    community.vmware.vmware_guest_tools_wait:
      <<: *vmw_login
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded 
    when: config_xml_file != ""
  when: copyconfig is succeeded

# Any additional packages required need to be installed 
# - name: Run shell commands via vm_shell
#   community.vmware.vmware_vm_shell:
#     <<: *vmw_login
#     vm_username: "root"
#     vm_password: '{{ vm_password_new }}'
#     vm_id: '{{ vm_name }}'
#     vm_shell: '/bin/sh'
#     vm_shell_args: " -c \"{{item}}\""
#     wait_for_process: true
#   delegate_to: localhost  
#   retries: 3
#   delay: 10
#   register: result
#   until: result is succeeded
#   ignore_errors: true
#   loop:
#     - "pkg-static install -y pfSense-pkg-tftpd"

 
