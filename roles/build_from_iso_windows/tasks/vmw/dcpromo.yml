---
- name: Test to see if DC Promo has already been done
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}' 
    validate_certs: false
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: "{{ vm_name }}"
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: " -command \"({{item}})\""
    wait_for_process: true
  delegate_to: localhost
  register: checkdc    
  ignore_errors: true         
  loop:
    - "$result=$(if($($osInfo = Get-WmiObject -Class Win32_OperatingSystem;$osInfo.ProductType) -ne 2){throw})"

- name: DCPromo
  block:   
  - name: Prepare for DCPromo
    community.vmware.vmware_vm_shell:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}' 
      validate_certs: false
      vm_username: "{{ vm_username }}"
      vm_password: '{{ vm_password_new }}'
      vm_id: "{{ vm_name }}"
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: " -command \"({{item}})\""
      wait_for_process: true
    delegate_to: localhost
    retries: 3
    delay: 15 
    register: result           
    until: result is succeeded    
    loop:
      # Install AD-Domain-Services
      - "Install-windowsfeature AD-Domain-Services -IncludeAllSubFeature -IncludeManagementTools"
      # Install RSAT-ADDS        
      - "Install-windowsfeature RSAT-ADDS"
      # Unrestrict remote scripts
      - "Set-ExecutionPolicy unrestricted"

  - name: Create Domain
    community.vmware.vmware_vm_shell:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}' 
      validate_certs: false
      vm_username: "{{ vm_username }}"
      vm_password: '{{ vm_password_new }}'
      vm_id: "{{ vm_name }}"
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: " -command \"({{item}})\""
      wait_for_process: true
    delegate_to: localhost
    loop:
      - "Import-module addsdeployment"
      - "Install-ADDSForest -DomainName {{vm_domain}} -CreateDnsDelegation:$false -InstallDNS:$true -NoRebootOnCompletion:$true -DatabasePath C:\\Windows\\NTDS -LogPath C:\\Windows\\NTDS -SysvolPath C:\\Windows\\SYSVOL -SafeModeAdministratorPassword $(convertto-securestring {{ vm_password_new }} -AsPlainText -Force:$true) -Force:$true -WarningAction silentlyContinue"
    retries: 6
    delay: 60
    register: result           
    until: result is succeeded    
    ignore_errors: true #This step always returns a vix error

  - name: Reboot-Guest
    vmware_guest_powerstate:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}' 
      validate_certs: false
      name: '{{ vm_name }}'
      state: reboot-guest
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded  

  - name: Wait for 60 seconds
    wait_for: timeout=60
    delegate_to: localhost

  - name: Wait for VMware tools to become available by name
    vmware_guest_tools_wait:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}' 
      validate_certs: false
      # vm_username: "{{ vm_username }}"
      # vm_password: '{{ vm_password_new }}'
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded 

  - name: Wait for 30 seconds for VMware Tools refresh
    wait_for: timeout=30
    delegate_to: localhost

  - name: Perform additional configuration steps
    community.vmware.vmware_vm_shell:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}' 
      validate_certs: false
      vm_username: "{{ vm_username }}"
      vm_password: '{{ vm_password_new }}'
      vm_id: "{{ vm_name }}"
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: " -command \"({{item}})\""
      wait_for_process: true
    delegate_to: localhost
    retries: 3
    delay: 15 
    register: result           
    until: result is succeeded     
    ignore_errors: true
    loop:
      # Assign dns server to itself      
      - "Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddresses 127.0.0.1"
      # re-enable remote desktop
      - "set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -name fDenyTSConnections -Value 0"
      # re-add the remote desktop firewall fule
      - "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
      # Disable firewall for Domain, Public and Private profiles
      - "Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False"

  when: checkdc is failed
  
# scriptlet for adding dns records
#Add-DnsServerResourceRecordA -Name "host23" -ZoneName "contoso.com" -AllowUpdateAny -IPv4Address "172.18.99.23" -TimeToLive 01:00:00


