- name: Create new VM 
  community.proxmox.proxmox_kvm:
    api_user: '{{ pve_username }}@pam'
    api_password: '{{ pve_password }}'
    api_host: '{{ pve_address }}'
    state: present
    name: '{{ vm_name|replace("_", "-") }}'
    node: "{{ pve_node }}"
    net: '{{ networks }}'
      # net0: 'e1000,bridge={{ cluster_network }}'
      # net1: 'e1000,bridge={{ cluster_network }}'
      # net2: 'e1000,bridge={{ data_network }}'
      # net3: 'e1000,bridge={{ data_network }}'
    serial:
      serial0: 'socket'
      serial1: 'socket'
    vga: serial0
    cpu: host
    sockets: '{{ vm_num_cpus|int }}'
    vcpus: '{{ vm_num_cpus|int }}'
    memory: '{{ vm_memory_mb |int}}'
    agent: true
  delegate_to: localhost
  register: create_vm
  retries: 3
  delay: 10
  until: create_vm is succeeded

- debug: 
    msg: "{{ create_vm.vmid }}"

- name: Remove staging directory
  file:
    path: "{{ playbook_dir }}/files/{{vm_name}}"
    state: absent
  delegate_to: localhost

- name: Creating a new staging directory
  file:
    path: "{{ playbook_dir }}/files/{{vm_name}}"
    state: directory
  delegate_to: localhost

- name: Extract OVA
  ansible.builtin.unarchive:
    src: "{{ovf_file}}"
    dest: "{{ playbook_dir }}/files/{{vm_name}}"
  delegate_to: localhost

- name: Check file naming
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.vmdk"
  delegate_to: localhost
  register: file_check

- name: Ensure file names align with modern conventions
  shell:
    cmd: "{{item}}"
  delegate_to: localhost
  with_items:
    - "mv {{ playbook_dir }}/files/{{vm_name}}/*-disk1.vmdk {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.vmdk"
    - "mv {{ playbook_dir }}/files/{{vm_name}}/*-disk2.vmdk {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk2.vmdk"
    - "mv {{ playbook_dir }}/files/{{vm_name}}/*-disk3.vmdk {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk3.vmdk"
    - "mv {{ playbook_dir }}/files/{{vm_name}}/*-disk4.vmdk {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk4.vmdk"
  when: not file_check.stat.exists

- name: Convert boot disk to raw
  shell:
    cmd: "qemu-img convert -f vmdk -O raw  {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.vmdk {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw"
  delegate_to: localhost

- name: Extract env file
  shell:
    cmd: "mcopy -n -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s ::/env/env {{ playbook_dir }}/files/{{vm_name}}/env"
  delegate_to: localhost

- name: Extract setup.ngsh file
  shell:
    cmd: "mcopy -n -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s ::/files/setup.ngsh {{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
  delegate_to: localhost
  ignore_errors: true

# - name: unsetenv
#   ansible.builtin.lineinfile:
#     path: "{{ playbook_dir }}/files/{{vm_name}}/env"
#     state: absent
#     regexp: '^setenv {{item}} .*$'
#   delegate_to: localhost
#   with_items:
#    - bootarg.to.unset

- name: setenv
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items:
    # Don't run VMware tool on PVE  
    - bootarg.vm.run_vmtools="false"
    # Use serial console on PVE
    - console="comconsole,vidconsole"
    # set the node's unique identifiers
    - SYS_SERIAL_NUM="{{sys_serial_number}}"
    - bootarg.nvram.sysid="{{nvram_sysid}}"
    # configure the simulated disk shelves
    - bootarg.vm.sim.vdevinit="{{vdevinit}}"
    - bootarg.sim.vdevinit="{{vdevinit}}"
    # set automatic 4a
    - bootarg.bootmenu.allow_opts="true"
    - bootarg.bootmenu.args="4a"
    # Old method for automating 4a
    #- bootarg.init.initnextV2="true"
    #- bootarg.init.wipeclean="true"
    # make the node discoverable on the cluster network
    - bootarg.init.auto_cluster_lif.disable="false"
    # disable dhcp for node_mgmt to prevent mgmt_auto lif creation
    - bootarg.init.dhcp.disable="true"
    # Enable the setup.ngsh script
    - bootarg.setup.auto.internal="true"
    - bootarg.setup.auto.file="/cfcard/files/setup.ngsh"
    - bootarg.setup.auto="true"

- name: set extra bootargs
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items: "{{bootargs}}"
  when: bootargs is defined

- name: unmute console output
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items:
    - boot_verbose="true"
    - bootarg.init.console_muted="false"
  when:
    - not console_muted|default(true)

- name: Create new setup.ngsh
  copy:
    dest: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    content: |
      #!/bin/sh
      #Created by LabBuilder
  delegate_to: localhost

- name: Script Node Setup
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    line: "ngsh -c '{{item}}'"
  delegate_to: localhost
  with_items:
    # Wait for cluster lif creation
    - set diagnostic; system node wait-for-cluster-lif-setup
    # Set the nodename
    - system node rename -newname {{ node_name }}
    # Ensure ports e0c/e0d land in the Default ipspace
    - network port modify -node {{ node_name }} -port e0c -ipspace Default
    - network port modify -node {{ node_name }} -port e0d -ipspace Default
    # Create node management lif
    - network interface create -lif mgmt1 -role node-mgmt -home-node {{ node_name }} -home-port e0c -status-admin up -address {{ ontap_node_mgmt_ip }} -netmask {{ ontap_netmask }}
    # Create default route
    - network route create -gateway {{ontap_gateway}} -vserver Default -metric 20
    # Set the admin password
    - security login password -username admin -new-password {{ ontap_password }}
    - security login create -username admin -application ssh -authmethod password

- name: Script Cluster Setup
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    line: "ngsh -c {{item}}"
  delegate_to: localhost
  with_items:
    # Create the cluster
    - cluster create -clustername {{ ontap_cluster_name }}
    # Create the cluster management lif
    - network interface create -vserver {{ ontap_cluster_name }} -lif cluster_mgmt -role cluster-mgmt -home-node {{ node_name }} -home-port e0d -address {{ ontap_cluster_mgmt_ip }} -netmask {{ ontap_netmask }}
  when:
    - ontap_cluster_mgmt_ip|default("") != ""

- name: notify add nodes by serial
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    line: "ngsh -c  echo Adding nodes by serial {{add_nodes_by_serial|default('')}}"
  delegate_to: localhost
  when:
    - add_nodes_by_serial|default("") != ""

- name: Add nodes by serial
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    line: "ngsh -c add-node -cluster-ips $(ngsh -c 'show-discovered -fields serial-number,address' | grep {{item}}| tr -s ' ' | cut -d' ' -f3)"
  delegate_to: localhost
  when:
    - add_nodes_by_serial|default("") != ""
  with_items: "{{ add_nodes_by_serial.split(',') }}"

- name: Add extra commands to setup.ngsh
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/setup.ngsh"
    line: "ngsh -c {{item}}"
  delegate_to: localhost
  with_items: "{{ extra_commands }}"
  when:
    - extra_commands is defined

- name: inject env file
  shell:
    cmd: "mcopy -o -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s {{ playbook_dir }}/files/{{vm_name}}/env ::/env/env "
  delegate_to: localhost

- name: create fies directory on cfcard
  shell:
    cmd: "mmd -D s -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s ::/files"
  delegate_to: localhost
  ignore_errors: true

- name: inject setup.ngsh file
  shell:
    cmd: "mcopy -o -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s {{ playbook_dir }}/files/{{vm_name}}/setup.ngsh ::/files/"
  delegate_to: localhost

- name: Creating a new staging directory
  file:
    path: "{{ playbook_dir }}/files/{{vm_name}}/image"
    state: directory
  delegate_to: localhost
  when: update_package is defined
  
- name: Extract Update package
  ansible.builtin.unarchive:
    src: "{{update_package}}"
    dest: "{{ playbook_dir }}/files/{{vm_name}}/image/"
  delegate_to: localhost
  when: update_package is defined

- name: Copy package files into image
  shell:
    cmd: "mcopy -o -i {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw@@66528s {{ playbook_dir }}/files/{{vm_name}}/image/netboot/{{item}} ::/x86_64/freebsd/image1/"
  delegate_to: localhost
  when: update_package is defined
  with_items:
  - BUILD
  - CHECKSUM
  - COMPAT.TXT
  - INSTALL
  - VERSION
  - bsdboot.tgz
  - cap.xml
  - if_gve.ko
  - if_vmx.ko
  - if_vtnet.ko
  - kernel
  - kernel.csfc.sig
  - kernel.sig
  - key_fingerprint.csfc.sig
  - key_fingerprint.sig
  - metadata.xml
  - mlx4.ko
  - mlx4en.ko
  - mlxen.ko
  - mpt.ko
  - netapp_vmx.ko
  - nvdimm.ko
  - platform.ko
  - platform.ko.csfc.sig
  - platform.ko.sig
  - pmroot_late.tgz
  - checksum.os
  - platfs.img
  - platfs.img.sig
  - platfs.img.csfc.sig
  - pvscsi.ko
  - rootfs.img
  - rootfs.img.csfc.sig
  - rootfs.img.sig
  - virtio.ko
  - virtio_blk.ko
  - virtio_pci.ko
  - virtio_scsi.ko
  - xenhvm.ko
  # - fw.tgz
  # - hv_ata_pci_disengage.ko
  # - hv_netvsc.ko
  # - hv_storvsc.ko
  # - hv_utils.ko
  # - hv_vmbus.ko
  ignore_errors: true


- name: Convert boot disk to vmdk
  shell:
    cmd: "qemu-img convert -f raw -O vmdk  {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.raw {{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-disk1.vmdk"
  delegate_to: localhost

- name: Copy disks to temporary storage
  copy:
    src: "{{ playbook_dir }}/files/{{vm_name}}/vsim-NetAppDOT-simulate-{{item}}.vmdk"
    dest: "{{ iso_path }}/{{ vm_name }}-{{item}}.vmdk"
  delegate_to: temp_host
  loop:
    - disk1
    - disk2
    - disk3
    - disk4

- name: import disks
  shell:  
    cmd: "qm disk import {{ create_vm.vmid }} {{ iso_path }}/{{ vm_name }}-{{item}}.vmdk {{vm_datastore}} --format raw"
  delegate_to: temp_host
  loop:
    - disk1
    - disk2
    - disk3
    - disk4

- name: Attach disks
  shell:  
    cmd: "qm set {{ create_vm.vmid }} --ide{{item}} file={{vm_datastore}}:vm-{{create_vm.vmid}}-disk-{{item}}"
  delegate_to: temp_host
  loop:
   - 0
   - 1
   - 2
   - 3

- name: Remove disks from temporary storage
  ansible.builtin.file:
    path: "{{ iso_path }}/{{ vm_name }}-{{item}}.vmdk"
    state: absent
  delegate_to: temp_host
  loop:
    - disk1
    - disk2
    - disk3
    - disk4

# This disk is large and empty so it is faster to make a new one
# - name: Create IDE3 (simdisks)
#   community.proxmox.proxmox_disk:
#     api_user: '{{ pve_username }}@pam'
#     api_password: '{{ pve_password }}'
#     api_host: '{{ pve_address }}'
#     vmid: "{{ create_vm.vmid }}"
#     # name: '{{ vm_name|replace("_", "-") }}'
#     disk: ide3
#     storage: "{{vm_datastore}}"
#     size: 250
#     create: forced
#     state: present
#   delegate_to: localhost
#   retries: 3
#   delay: 10
#   register: result
#   until: result is succeeded

- name: Set boot order
  shell:  
    cmd: "qm set {{ create_vm.vmid }} --bootdisk ide0 --boot order=ide0"
  delegate_to: temp_host

- name: Start VM
  community.proxmox.proxmox_kvm:
    api_user: '{{ pve_username }}@pam'
    api_password: '{{ pve_password }}'
    api_host: '{{ pve_address }}'
    state: started
    name: '{{ vm_name|replace("_", "-") }}'
  delegate_to: localhost
  retries: 3
  delay: 10
  register: result
  until: result is succeeded
  ignore_errors: true

# This prevents duplicate sysids from being used when the role is called
# multiple times within a playbook's tasks section.
- name: clear nvram_sysid
  set_fact:
    nvram_sysid: ""

- name: Remove staging directory
  file:
    path: "{{ playbook_dir }}/files/{{vm_name}}"
    state: absent
  delegate_to: localhost