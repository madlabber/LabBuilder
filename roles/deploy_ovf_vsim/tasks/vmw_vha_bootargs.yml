
- name: setenv
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items:
    # Enable VMware tools on VMware  
    - bootarg.vm.run_vmtools="true"
    # Use serial console on PVE
    #- console="comconsole,vidconsole"
    # set the node's unique identifiers
    - SYS_SERIAL_NUM="{{sys_serial_number}}"
    - bootarg.nvram.sysid="{{nvram_sysid}}"
    # configure the simulated disk shelves
    - bootarg.vm.sim.vdevinit="{{vdevinit}}"
    - bootarg.sim.vdevinit="{{vdevinit}}"
    # set automatic 4a
    - bootarg.bootmenu.allow_opts="true"
    - bootarg.bootmenu.args="4a"
    # Old method for automating 4a
    #- bootarg.init.initnextV2="true"
    #- bootarg.init.wipeclean="true"
    # make the node discoverable on the cluster network
    - bootarg.init.auto_cluster_lif.disable="false"
    # disable dhcp for node_mgmt to prevent mgmt_auto lif creation
    - bootarg.init.dhcp.disable="true"
    # Enable the setup.ngsh script
    - bootarg.setup.auto.internal="true"
    - bootarg.setup.auto.file="/cfcard/files/setup.ngsh"
    - bootarg.setup.auto="true"

- name: set extra bootargs
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items: "{{bootargs}}"
  when: bootargs is defined

- name: unmute console output
  ansible.builtin.lineinfile:
    path: "{{ playbook_dir }}/files/{{vm_name}}/env"
    regexp: "^setenv {{item.split('=')[0]}} .*$"
    line: "setenv {{item.split('=')[0]}} {{item.split('=')[1]}}"
  delegate_to: localhost
  with_items:
    - boot_verbose="true"
    - bootarg.init.console_muted="false"
  when:
    - not console_muted|default(true)
