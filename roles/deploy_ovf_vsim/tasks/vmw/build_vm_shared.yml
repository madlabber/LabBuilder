##TODO:
## Assign IC MACs
## Assign unique sysids
## Add partner info to bootarg
## run node setup on node2
## run cluster setup on node1

---
# Now we can deploy the VM
# use this version if the target is a cluster
- name: '{{item}}: Deploy ovf file: {{ovf_file}}'
  community.vmware.vmware_deploy_ovf:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    cluster: '{{ vcenter_cluster }}'
    datastore: "{{ vm_datastore }}"
    name: "{{ item }}"
    ovf: "{{ playbook_dir }}/files/{{item}}/vsim-NetAppDOT-simulate.ovf"
    disk_provisioning: "{{vm_disk_provisioning}}"
    power_on: no
    networks: "{u'hostonly':u'{{ cluster_network }}',u'nat':u'{{ data_network }}'}"
    wait_for_ip_address: false
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result
  until: result is succeeded
  loop:
    - "{{node1_name}}"
    - "{{node2_name}}"
  when: vcenter_cluster|default("") != ""

# use this version if the target is a host that is not in a cluster
- name: '{{item}}: Deploy ovf file: {{ovf_file}}'
  community.vmware.vmware_deploy_ovf:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    esxi_hostname: '{{esxi_hostname}}'
    datastore: "{{ vm_datastore }}"
    name: "{{ item }}"
    ovf: "{{ playbook_dir }}/files/{{item}}/vsim-NetAppDOT-simulate.ovf"
    disk_provisioning: "{{vm_disk_provisioning}}"
    power_on: no
    networks: "{u'hostonly':u'{{ cluster_network }}',u'nat':u'{{ data_network }}'}"
    wait_for_ip_address: false
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result
  until: result is succeeded
  loop:
    - "{{node1_name}}"
    - "{{node2_name}}"
  when: vcenter_cluster|default("") == ""

- name: '{{item}}: Adjust VM Sizing'
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ item }}'
    state: present
    hardware:
      memory_mb: "{{ vm_memory_mb}}"
      num_cpus: '{{ vm_num_cpus }}'
    advanced_settings:
      - key: pciHole.start
        value: 1024  # Moving the PCI hole here gives ONTAP access to more system ram
      - key: "disk.EnableUUID"
        value: "true"  # Required for vSCSI support
  delegate_to: localhost
  loop:
    - "{{node1_name}}"
    - "{{node2_name}}"

# Remove the VHA disk on IDE1:1
- name: remove vha disk on IDE1:1
  community.vmware.vmware_guest_disk:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    name: '{{ item }}'
    disk:
      - state: absent
        controller_type: ide
        controller_number: 1
        unit_number: 1
        destroy: true
  ignore_errors: true
  delegate_to: localhost
  register: disk_facts
  loop:
    - "{{node1_name}}"
    - "{{node2_name}}"


# Tear down and rebuild the VM's Network Interfaces
- name: Tag each network adapter 
  community.vmware.vmware_guest_network:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    name: "{{ vm_name }}"
    label: "Network adapter {{ item }}"
    mac_address: "00:50:56:99:99:0{{ item }}"
    network_name: "{{cluster_network}}"
    device_type: e1000
    state: present
  with_items: 
   - 1
   - 2
   - 3
   - 4
  delegate_to: localhost 
  ignore_errors: true

- name: remove each network adapter 
  community.vmware.vmware_guest_network:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    name: "{{ vm_name }}"
    mac_address: "00:50:56:99:99:0{{ item }}"
    state: absent
  with_items: 
   - 1
   - 2
   - 3
   - 4
  delegate_to: localhost 
  ignore_errors: true

- name: add nics
  block:
    - community.vmware.vmware_guest_network:
        hostname: "{{ vcenter_address }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        # datacenter: "{{ vcenter_datacenter }}"
        name: '{{ vm_name }}'
        state: present
        force: yes
        device_type:  "e1000"
        network_name: "{{ item.name }}"
        connected: true
        start_connected: true
      delegate_to: localhost
      with_items: "{{networks}}"
      ignore_errors: true


# Add scsi controllers
- name: '{{ item }}: Add SCSI controllers'
  community.vmware.vmware_guest_controller:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: "{{ vcenter_datacenter }}"
    name: '{{ item }}'
    controllers:
      - state: present
        type: lsilogicsas
        controller_number: 0
        bus_sharing: virtualSharing
      - state: present
        type: lsilogicsas
        controller_number: 1
        bus_sharing: virtualSharing
      - state: present
        type: lsilogicsas
        controller_number: 2
        bus_sharing: virtualSharing
      - state: present
        type: lsilogicsas
        controller_number: 3
        bus_sharing: virtualSharing
  delegate_to: localhost
  register: disk_controller_facts
  loop:
    - "{{node1_name}}"
    - "{{node2_name}}"

# Set IC MAC
- name: '{{node1_name}}: Set IC MAC'
  community.vmware.vmware_guest_network:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    label: "Network adapter {{vm_num_nics}}"
    network_name: "{{cluster_network}}"
    device_type: e1000
    mac_address: "{{node1_icmac}}"
    name: '{{ node1_name }}'
    state: present
  delegate_to: localhost

# Set IC MAC
- name: '{{node2_name}}: Set IC MAC'
  community.vmware.vmware_guest_network:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datacenter: '{{ vcenter_datacenter }}'
    label: "Network adapter {{vm_num_nics}}"
    network_name: "{{cluster_network}}"
    device_type: e1000
    mac_address: "{{node2_icmac}}"
    name: '{{ node2_name }}'
    state: present
  delegate_to: localhost

- set_fact:
    serial_ports:
      - type: 'pipe'
        pipe_name: '\\.\pipe\{{ node1_name }}_com1'
        endpoint: 'client'
      - type: 'pipe'
        pipe_name: '\\.\pipe\{{ node1_name }}_com2'
        endpoint: 'client'
  when:
    - serial_ports|default(false) is false

# Create serial ports
- name: Create multiple serial ports with Backing type - network, pipe, device and file
  community.vmware.vmware_guest_serial_port:
    hostname: "{{ vcenter_address }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: '{{ node1_name }}'
    backings: "{{serial_ports}}"
  delegate_to: localhost
  register: create_serial_ports
  when:
    - serial_ports is defined
    - serial_ports is not false

- set_fact:
    partner_serial_ports:
      - type: 'pipe'
        pipe_name: '\\.\pipe\{{ node2_name}}_com1'
        endpoint: 'client'
      - type: 'pipe'
        pipe_name: '\\.\pipe\{{ node2_name}}_com2'
        endpoint: 'client'
  when:
    - partner_serial_ports|default(false)

# Create serial ports
- name: Create multiple serial ports with Backing type - network, pipe, device and file
  community.vmware.vmware_guest_serial_port:
    hostname: "{{ vcenter_address }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    name: '{{ node2_name }}'
    backings: "{{partner_serial_ports}}"
  delegate_to: localhost
  register: create_serial_ports
  when:
    - partner_serial_ports is defined
    - partner_serial_ports is not false

- name: create shared disk shelf 0
  include_tasks: share_disk.yml
  vars:
    disk_size_mb: "{{shelf0_size}}"
    node1_scsi_controller: 0
    node2_scsi_controller: 1
    lun_number: "{{item.unit_number}}"
  when:
    - shelf0_disk_size|default("") != ""
    - item.disk <= shelf0_disk_count|default(shelf0_qty)|int
  loop:
      - { disk:  1, unit_number: 0 }
      - { disk:  2, unit_number: 1 }
      - { disk:  3, unit_number: 2 }
      - { disk:  4, unit_number: 3 }
      - { disk:  5, unit_number: 4 }
      - { disk:  6, unit_number: 5 }
      - { disk:  7, unit_number: 6 }
      - { disk:  8, unit_number: 8 }
      - { disk:  9, unit_number: 9 }
      - { disk: 10, unit_number: 10 }
      - { disk: 11, unit_number: 11 }
      - { disk: 12, unit_number: 12 }
      - { disk: 13, unit_number: 13 }
      - { disk: 14, unit_number: 14 }
      - { disk: 15, unit_number: 15 }

- name: create shared disk shelf 1
  include_tasks: share_disk.yml
  vars:
    disk_size_mb: "{{shelf1_size}}"
    node1_scsi_controller: 1
    node2_scsi_controller: 0
    lun_number: "{{item.unit_number}}"
  when:
    - shelf1_disk_size|default("") != ""
    - item.disk <= shelf1_disk_count|default(shelf1_qty)|int
  loop:
      - { disk:  1, unit_number: 0 }
      - { disk:  2, unit_number: 1 }
      - { disk:  3, unit_number: 2 }
      - { disk:  4, unit_number: 3 }
      - { disk:  5, unit_number: 4 }
      - { disk:  6, unit_number: 5 }
      - { disk:  7, unit_number: 6 }
      - { disk:  8, unit_number: 8 }
      - { disk:  9, unit_number: 9 }
      - { disk: 10, unit_number: 10 }
      - { disk: 11, unit_number: 11 }
      - { disk: 12, unit_number: 12 }
      - { disk: 13, unit_number: 13 }
      - { disk: 14, unit_number: 14 }
      - { disk: 15, unit_number: 15 }

- name: create shared disk shelf 2
  include_tasks: share_disk.yml
  vars:
    disk_size_mb: "{{shelf2_size}}"
    node1_scsi_controller: 2
    node2_scsi_controller: 3
    lun_number: "{{item.unit_number}}"
  when:
    - shelf2_disk_size|default("") != ""
    - item.disk <= shelf2_disk_count|default(shelf2_qty)|int
  loop:
      - { disk:  1, unit_number: 0 }
      - { disk:  2, unit_number: 1 }
      - { disk:  3, unit_number: 2 }
      - { disk:  4, unit_number: 3 }
      - { disk:  5, unit_number: 4 }
      - { disk:  6, unit_number: 5 }
      - { disk:  7, unit_number: 6 }
      - { disk:  8, unit_number: 8 }
      - { disk:  9, unit_number: 9 }
      - { disk: 10, unit_number: 10 }
      - { disk: 11, unit_number: 11 }
      - { disk: 12, unit_number: 12 }
      - { disk: 13, unit_number: 13 }
      - { disk: 14, unit_number: 14 }
      - { disk: 15, unit_number: 15 }

- name: create shared disk shelf 3
  include_tasks: share_disk.yml
  vars:
    disk_size_mb: "{{shelf3_size}}"
    node1_scsi_controller: 3
    node2_scsi_controller: 2
    lun_number: "{{item.unit_number}}"
  when:
    - shelf3_disk_size|default("") != ""
    - item.disk <= shelf3_disk_count|default(shelf3_qty)|int
  loop:
      - { disk:  1, unit_number: 0 }
      - { disk:  2, unit_number: 1 }
      - { disk:  3, unit_number: 2 }
      - { disk:  4, unit_number: 3 }
      - { disk:  5, unit_number: 4 }
      - { disk:  6, unit_number: 5 }
      - { disk:  7, unit_number: 6 }
      - { disk:  8, unit_number: 8 }
      - { disk:  9, unit_number: 9 }
      - { disk: 10, unit_number: 10 }
      - { disk: 11, unit_number: 11 }
      - { disk: 12, unit_number: 12 }
      - { disk: 13, unit_number: 13 }
      - { disk: 14, unit_number: 14 }
      - { disk: 15, unit_number: 15 }

- name: Start Node 2
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ node2_name }}'
    state: poweredon
    wait_for_ip_address: false
  delegate_to: localhost

- name: Start Node 1
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ node1_name }}'
    state: poweredon
    wait_for_ip_address: false
  delegate_to: localhost

- name: Wait for VMware tools to become available
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    name: '{{ node2_name }}'
  delegate_to: localhost
  retries: 3
  delay: 15
  register: result
  until: result is succeeded

